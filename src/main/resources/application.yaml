server:
  port: 8123
  servlet:
    context-path: /api
    session:
      cookie:
        max-age: 1800
spring:
  application:
    name: image-host-backend
  # 文件大一点
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB

  # session 配置
  session:
    store-type: redis
    timeout: 1800


  # Redis 配置
  redis:
    database: 0
    host: 192.168.21.132
    port: 6379
    timeout: 5000
    password: 123456


  # 数据库配置
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/image
    username: image
    password: 123456

  spring:
  shardingsphere:
    datasource:
      names: image
      image:  # 修正数据源名称，与 names 一致
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/image?useSSL=false&serverTimezone=UTC
        username: image
        password: 123456
    rules:
      sharding:
        tables:
          picture:
            actual-data-nodes: image.picture
            table-strategy:
              standard:
                sharding-column: spaceId
                sharding-algorithm-name: picture_sharding_algorithm
        sharding-algorithms:
          picture_sharding_algorithm:
            type: CLASS_BASED
            props:
              strategy: standard
              algorithmClassName: com.yang.imagehostbackend.manager.sharding.PictureShardingAlgorithm
    props:
      sql-show: true  # 打印 SQL 日志，便于调试

  # 消息队列
  rabbitmq:
      host: 192.168.21.132
      port: 5672
      username: guest
      password: guest
  # Kafka配置
  kafka:
    bootstrap-servers: 192.168.21.132:9092
    producer:
      # 发生错误后，消息重发的次数
      retries: 3
      # 当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里
      batch-size: 16384
      # 设置生产者内存缓冲区的大小
      buffer-memory: 33554432
      # key的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # value的序列化方式
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应
      acks: 1
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # key的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # value的反序列化方式
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      # 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      properties:
        spring:
          json:
            trusted:
              packages: com.yang.imagehostbackend.model.dto.picture
    listener:
      # 在侦听器容器中运行的线程数
      concurrency: 5
      # listener负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      # 消费者组
      missing-topics-fatal: false

mybatis-plus:
  configuration:
    map-underscore-to-camel-case: false
    # 仅在开发环境开启日志
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      logic-delete-field: isDelete # 全局逻辑删除的实体字段名
      logic-delete-value: 1 # 逻辑已删除值（默认为 1）
      logic-not-delete-value: 0 # 逻辑未删除值（默认为 0）
    enable-sql-runner: true



# 接口文档配置
knife4j:
  enable: true
  openapi:
    title: "云端图床接口文档"
    version: 1.0
    group:
      default:
        api-rule: package
        api-rule-resources:
          - com.yang.imagehostbackend.controller

cos:
  client:
    host:
    secretId:
    secretKey:
    region:
    bucket:

# 阿里云 AI 配置
aliYunAi:
  apiKey:

# 自定义Kafka主题配置
kafka:
  topics:
    expendimage-task: expendimage-task

